// Generated by LiveScript 1.2.0
var values, userId, askServices, ref;
values = require('prelude-ls').values;
userId = 1;
askServices = angular.module('askServices', ['firebase']);
ref = new Firebase('https://askkkkk.firebaseio.com/');
askServices.factory('candidateService', ['$firebase'].concat(function($firebase){
  return $firebase(ref.child('candidates'));
}));
askServices.factory('questionService', ['$firebase'].concat(function($firebase){
  var x$, service;
  x$ = service = $firebase(ref.child('questions'));
  x$.post = function(arg$, onComplete){
    var title, content, category, addressing, post_date, deadline;
    title = arg$.title, content = arg$.content, category = arg$.category, addressing = arg$.addressing, post_date = arg$.post_date, deadline = arg$.deadline;
    return service.$add({
      title: title,
      content: content,
      category: category,
      addressing: addressing,
      post_date: post_date,
      deadline: deadline,
      state: 'open',
      signatures_count: 0
    }).then(function(postRef){
      (function(meta){
        meta.$child("open/" + postRef.name()).$set(true);
      }.call(this, $firebase(ref.child('question_index'))));
      (function(meta){
        var i$, ref$, len$, c;
        for (i$ = 0, len$ = (ref$ = category).length; i$ < len$; ++i$) {
          c = ref$[i$];
          meta.$child(c + "/" + postRef.name()).$set(true);
        }
      }.call(this, $firebase(ref.child('category'))));
      (function(meta){
        var i$, ref$, len$, c;
        for (i$ = 0, len$ = (ref$ = addressing).length; i$ < len$; ++i$) {
          c = ref$[i$];
          meta.$child(c + "/questions/" + postRef.name()).$set(true);
        }
      }.call(this, $firebase(ref.child('candidate_meta'))));
      if (onComplete) {
        return onComplete(postRef);
      }
    });
  };
  x$.$on('child_added', function(arg$){
    var snapshot, prevChild, c;
    snapshot = arg$.snapshot, prevChild = arg$.prevChild;
    return service[snapshot.name].addressing = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = snapshot.value.addressing).length; i$ < len$; ++i$) {
        c = ref$[i$];
        results$.push($firebase(ref.child("candidates/" + c)));
      }
      return results$;
    }());
  });
  x$.get = function(id){
    var x$, postRef;
    x$ = postRef = service.$child(id);
    x$.$on('loaded', function(snap){
      var c;
      postRef.$id = id;
      return postRef.addressing = (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = postRef.addressing).length; i$ < len$; ++i$) {
          c = ref$[i$];
          results$.push($firebase(ref.child("candidates/" + c)));
        }
        return results$;
      }());
    });
    return x$;
  };
  return x$;
}));
askServices.factory('signService', ['$firebase'].concat(function($firebase){
  return {
    sign: function(userId, questionId){
      return ref.child("questions/" + questionId + "/signatures/" + userId).once('value', function(snapshot){
        var today, x$, y$;
        if (snapshot.val()) {
          return;
        }
        today = new Date();
        x$ = ref.child("questions/" + questionId + "/signatures/" + userId);
        x$.setWithPriority({
          date: {
            year: today.getFullYear(),
            month: today.getMonth() + 1,
            day: today.getDate()
          }
        }, today.getTime());
        y$ = ref.child("questions/" + questionId + "/signatures_count");
        y$.transaction(function(currentValue){
          return currentValue + 1;
        });
        return y$;
      });
    }
  };
}));
/**
 * Filter an object to an array of its keys (properties) except those given be AngularFire.
 */
askServices.filter('toKeys', function(){
  return function(input, attributes){
    switch (false) {
    case !!angular.isObject(input):
      return input;
    default:
      return keys(input).filter(function(it){
        return it[0] !== '$';
      });
    }
  };
});